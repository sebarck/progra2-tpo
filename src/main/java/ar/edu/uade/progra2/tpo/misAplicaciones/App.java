/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ar.edu.uade.progra2.tpo.misAplicaciones;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

import ar.edu.uade.progra2.tpo.miApi.ColaPrioridadTDA;
import ar.edu.uade.progra2.tpo.miApi.ConjuntoTDA;
import ar.edu.uade.progra2.tpo.miApi.DiccionarioMultipleTDA;
import ar.edu.uade.progra2.tpo.misImplementaciones.ColaPrioridad;
import ar.edu.uade.progra2.tpo.misImplementaciones.Conjunto;
import ar.edu.uade.progra2.tpo.misImplementaciones.DiccionarioMultiple;
import ar.edu.uade.progra2.tpo.misMetodos.*;

public class App {

    private static String file = "src/main/resources/Materias.csv";
    private static DiccionarioMultipleTDA diccionario;
    private static PuntoA puntoA = new PuntoA();
    private static PuntoB puntoB = new PuntoB();
    private static PuntoC puntoC = new PuntoC();
    private static PuntoD puntoD = new PuntoD();
    private static PuntoE puntoE = new PuntoE();
    private static PuntoF puntoF = new PuntoF();
    private static PuntoHJ puntoHJ = new PuntoHJ();
    

    public static void main(String[] args) throws IOException {
        inicializarDiccionario();
        cargarDiccionario();
        imprimirCantidadMaterias();
        puntoB.porcentajeMateriasInformaticaPorCarrera(diccionario);
        puntoC.porcentajeMateriasCienciasBasicasPorCarrera(diccionario);
        puntoD.porcentajeMateriasCienciasSocialesPorCarrera(diccionario);
        puntoE.calcularCantidadOptativasPorCarrera(diccionario);
        imprimirMateriasUnicas();
        puntoF.materiasComunes(diccionario);
        imprimirMateriaNoComunes(diccionario);
    }

 
    private static void imprimirCantidadMaterias() {
    	System.out.println("\nCantidad de materias por carrera:");
    	ConjuntoTDA conjunto = diccionario.claves();
        while(!conjunto.conjuntoVacio()) {
        	int carrera = conjunto.elegir();
        	System.out.println("La carrera " + carrera + " tiene "  + puntoA.cantidadMateriasPorCarrera(diccionario, carrera) + " materias.");
        	conjunto.sacar(carrera);
        }
	}
    
    private static void imprimirMateriasUnicas() {
    	System.out.println("\nMaterias de cada carrera que no comparten con ninguna otra carrera:");
    	ColaPrioridadTDA cola = new ColaPrioridad();
    	cola.inicializarCola();
    	cola = puntoHJ.materiasUnicasPorCarrera(diccionario);
    	while(!cola.colaVacia()) {
			System.out.println("Codigo materia: " + cola.prioridad() + " - Carrera: " + cola.primero());
			cola.desacolar();
		}
	}
    
	private static void imprimirMateriaNoComunes(DiccionarioMultipleTDA diccionario) {
		System.out.println("\n\nMaterias no comunes para cada combinacion de dos carreras:");
    	ConjuntoTDA conjunto = diccionario.claves();
        while(!conjunto.conjuntoVacio()) {
        	int carrera = conjunto.elegir();
        	conjunto.sacar(carrera);
        	ConjuntoTDA conjuntoAux = new Conjunto();;
        	conjuntoAux.inicializarConjunto();
        	puntoHJ.copiarConjuntoConjunto(conjunto, conjuntoAux);
        	while(!conjuntoAux.conjuntoVacio()) {
        		int carrera2 = conjuntoAux.elegir();
        		System.out.println("\nLas materias no comunes entre la carrera " + carrera + " y la carrera " + carrera2 + " son: ");
        		ConjuntoTDA diferencia = puntoHJ.materiasNoComunesEntre2Carreras(diccionario, carrera, carrera2);
        		while(!diferencia.conjuntoVacio()) {
        			System.out.println("Codigo materia "+ diferencia.elegir());
        			diferencia.sacar(diferencia.elegir());
        		}
        		conjuntoAux.sacar(carrera2);
        	}
        }
    }

    

	private static void cargarDiccionario() throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(file));
        String line;
        reader.readLine();
        while ((line = reader.readLine()) != null) {
            String[] splitLine = line.split(";");
            int nroCarrera = Integer.valueOf(splitLine[0]);
            int codigoMateria = Integer.valueOf(splitLine[1]);
            System.out.format("Codigo carrera %d | Codigo materia %d\n", nroCarrera, codigoMateria);
            diccionario.agregar(nroCarrera, codigoMateria);
        }
        reader.close();
    }

    private static void inicializarDiccionario() {
        diccionario = new DiccionarioMultiple();
        diccionario.inicializarDiccionarioMultiple();
    }
}
